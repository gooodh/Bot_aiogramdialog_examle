import asyncio
import tracemalloc

from aiohttp import web
from loguru import logger

from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.types import BotCommand, BotCommandScopeDefault


from dao.database_middleware import DatabaseMiddlewareWithCommit, DatabaseMiddlewareWithoutCommit
from config import BASE_URL, HOST, PORT, WEBHOOK_PATH, bot, admins, dp

from users.router import user_router

async def set_commands():
    commands = [
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç"),

    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


async def start_bot():
    await set_commands()
    try:
        for admin_id in admins:
            await bot.send_message(admin_id, "–Ø –∑–∞–ø—É—â–µ–Ωü•≥.")

        response = await bot.set_webhook(f"{BASE_URL}{WEBHOOK_PATH}")
        if response:
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {response}.")
        else:
            logger.warning(f"–í–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—Ç–≤–µ—Ç –ø—É—Å—Ç: {response}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {HOST}:{PORT}")


async def stop_bot():
    try:
        for admin_id in admins:
            await bot.send_message(admin_id, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞ —á—Ç–æ?üòî")
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.session.close()
    except Exception as e:
        logger.error(e)
    logger.error("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")


async def main():
    tracemalloc.start()

        # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∏–¥–ª–≤–∞—Ä–µ–π
    dp.update.middleware.register(DatabaseMiddlewareWithoutCommit())
    dp.update.middleware.register(DatabaseMiddlewareWithCommit())
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(user_router)

    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ö–æ—Å—Ç–µ –∏ –ø–æ—Ä—Ç–µ
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host=HOST, port=PORT)
    await site.start()

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–ª
    try:
        while True:
            await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å
    except KeyboardInterrupt:
        pass  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é Ctrl+C
    finally:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        await runner.cleanup()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        print("–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
